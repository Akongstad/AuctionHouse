syntax = "proto3";
option go_package = "/Users/andreaskongstad/Documents/goLang/AuctionHouse/Auction";
package Auction;


message User{
    int64 id = 1;
    string name = 2;
}

message Message{
    User user = 1;
    uint32 timestamp = 2;
}

message ResultMessage{
    int32 amount = 1;
    User user = 2;
    uint32 timestamp = 3;
    bool stillActive = 4;
}

//Returntype = 1 for success, 2 for fail, 3 for exception
message BidReply{
    int32 returnType = 1;
    uint32 timestamp = 2;
}

message BidMessage{
    int32 amount = 1;
    User user = 2;
    uint32 timestamp = 3;
}

message ReplicateMessage{
    int32 amount = 1;
    User user = 2;
    uint32 timestamp = 3;
    string auctionStart = 4;
}

message Connect{
    User user = 1;
    bool active = 2;
}

message Void{}

message RingMessage{
    repeated int32 listOfPorts = 1;
    int32 brokenPort = 2;
}

message NewLeaderMessage{
    repeated int32 listOfPorts = 1;
    int32 leader = 2;
}

message PortIndex{
    int32 index = 1;
}

service AuctionHouse{
    rpc OpenConnection(Connect) returns (stream Message){}
    rpc CloseConnection(Message) returns (Void){}
    rpc Bid(BidMessage) returns (BidReply){}
    rpc Result(Void) returns (ResultMessage){}
    rpc Broadcast(Message) returns (Void){}
    rpc Replicate(ReplicateMessage) returns (BidReply){}
    rpc getID(Void) returns (PortIndex){}
    rpc RegisterPulse(Message) returns (Void){}
    rpc RingElection(RingMessage) returns (Void){}
    rpc SelectNewLeader(NewLeaderMessage) returns (Void){}
}